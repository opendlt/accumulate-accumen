// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v4.25.2
// source: accumen/block.proto

package accumen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TxResult represents the result of executing a transaction
type TxResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Transaction hash (SHA256 of CBOR-encoded transaction)
	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Gas units consumed during execution
	GasUsed uint64 `protobuf:"varint,2,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	// Execution result data (CBOR-encoded)
	Result []byte `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	// Error message if execution failed
	Error         string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxResult) Reset() {
	*x = TxResult{}
	mi := &file_accumen_block_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxResult) ProtoMessage() {}

func (x *TxResult) ProtoReflect() protoreflect.Message {
	mi := &file_accumen_block_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxResult.ProtoReflect.Descriptor instead.
func (*TxResult) Descriptor() ([]byte, []int) {
	return file_accumen_block_proto_rawDescGZIP(), []int{0}
}

func (x *TxResult) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *TxResult) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *TxResult) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *TxResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// BlockHeader contains block metadata and commitment roots
type BlockHeader struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Block height (sequential block number)
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// Hash of previous block header
	PrevHash []byte `protobuf:"bytes,2,opt,name=prev_hash,json=prevHash,proto3" json:"prev_hash,omitempty"`
	// Merkle root of all transaction hashes in this block
	TxsRoot []byte `protobuf:"bytes,3,opt,name=txs_root,json=txsRoot,proto3" json:"txs_root,omitempty"`
	// Merkle root of all transaction results in this block
	ResultsRoot []byte `protobuf:"bytes,4,opt,name=results_root,json=resultsRoot,proto3" json:"results_root,omitempty"`
	// State root hash after applying all transactions
	StateRoot []byte `protobuf:"bytes,5,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	// Block timestamp (Unix nanoseconds)
	Time          int64 `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	mi := &file_accumen_block_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_accumen_block_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_accumen_block_proto_rawDescGZIP(), []int{1}
}

func (x *BlockHeader) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockHeader) GetPrevHash() []byte {
	if x != nil {
		return x.PrevHash
	}
	return nil
}

func (x *BlockHeader) GetTxsRoot() []byte {
	if x != nil {
		return x.TxsRoot
	}
	return nil
}

func (x *BlockHeader) GetResultsRoot() []byte {
	if x != nil {
		return x.ResultsRoot
	}
	return nil
}

func (x *BlockHeader) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *BlockHeader) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// Block represents a complete L1 block with header and transactions
type Block struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Block header containing metadata and roots
	Header *BlockHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// All transaction results in this block
	Txs           []*TxResult `protobuf:"bytes,2,rep,name=txs,proto3" json:"txs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Block) Reset() {
	*x = Block{}
	mi := &file_accumen_block_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_accumen_block_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_accumen_block_proto_rawDescGZIP(), []int{2}
}

func (x *Block) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Block) GetTxs() []*TxResult {
	if x != nil {
		return x.Txs
	}
	return nil
}

var File_accumen_block_proto protoreflect.FileDescriptor

const file_accumen_block_proto_rawDesc = "" +
	"\n" +
	"\x13accumen/block.proto\x12\aaccumen\"l\n" +
	"\bTxResult\x12\x17\n" +
	"\atx_hash\x18\x01 \x01(\fR\x06txHash\x12\x19\n" +
	"\bgas_used\x18\x02 \x01(\x04R\agasUsed\x12\x16\n" +
	"\x06result\x18\x03 \x01(\fR\x06result\x12\x14\n" +
	"\x05error\x18\x04 \x01(\tR\x05error\"\xb3\x01\n" +
	"\vBlockHeader\x12\x16\n" +
	"\x06height\x18\x01 \x01(\x04R\x06height\x12\x1b\n" +
	"\tprev_hash\x18\x02 \x01(\fR\bprevHash\x12\x19\n" +
	"\btxs_root\x18\x03 \x01(\fR\atxsRoot\x12!\n" +
	"\fresults_root\x18\x04 \x01(\fR\vresultsRoot\x12\x1d\n" +
	"\n" +
	"state_root\x18\x05 \x01(\fR\tstateRoot\x12\x12\n" +
	"\x04time\x18\x06 \x01(\x03R\x04time\"Z\n" +
	"\x05Block\x12,\n" +
	"\x06header\x18\x01 \x01(\v2\x14.accumen.BlockHeaderR\x06header\x12#\n" +
	"\x03txs\x18\x02 \x03(\v2\x11.accumen.TxResultR\x03txsB;Z9github.com/opendlt/accumulate-accumen/types/proto/accumenb\x06proto3"

var (
	file_accumen_block_proto_rawDescOnce sync.Once
	file_accumen_block_proto_rawDescData []byte
)

func file_accumen_block_proto_rawDescGZIP() []byte {
	file_accumen_block_proto_rawDescOnce.Do(func() {
		file_accumen_block_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_accumen_block_proto_rawDesc), len(file_accumen_block_proto_rawDesc)))
	})
	return file_accumen_block_proto_rawDescData
}

var file_accumen_block_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_accumen_block_proto_goTypes = []any{
	(*TxResult)(nil),    // 0: accumen.TxResult
	(*BlockHeader)(nil), // 1: accumen.BlockHeader
	(*Block)(nil),       // 2: accumen.Block
}
var file_accumen_block_proto_depIdxs = []int32{
	1, // 0: accumen.Block.header:type_name -> accumen.BlockHeader
	0, // 1: accumen.Block.txs:type_name -> accumen.TxResult
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_accumen_block_proto_init() }
func file_accumen_block_proto_init() {
	if File_accumen_block_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_accumen_block_proto_rawDesc), len(file_accumen_block_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_accumen_block_proto_goTypes,
		DependencyIndexes: file_accumen_block_proto_depIdxs,
		MessageInfos:      file_accumen_block_proto_msgTypes,
	}.Build()
	File_accumen_block_proto = out.File
	file_accumen_block_proto_goTypes = nil
	file_accumen_block_proto_depIdxs = nil
}
